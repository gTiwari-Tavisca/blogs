{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-271cab9b31869dec5ffa75bf3f49c6c5",
            "file": "src/app/models/store/app.state.ts",
            "type": "interface",
            "sourceCode": "import * as auth from '../state';\r\nimport * as auth1 from '../../store/reducers/auth.reducers';\r\n\r\nimport * as BlogState from '../blog-state';\r\nimport * as blog from '../../store/reducers/blog.reducer';\r\n\r\nexport interface AppState {\r\n  blog: any;\r\n  authState: auth.State;\r\n  BlogState: BlogState.BlogState;\r\n}\r\nexport const reducers = {\r\n    auth: auth1.reducer,\r\n    blog: blog.blogReducer\r\n};\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "blog",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "BlogState",
                    "type": "BlogState.BlogState",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BlogState",
            "id": "interface-BlogState-2464074eddd9ad5ca2a5aafcce1840e1",
            "file": "src/app/models/blog-state.ts",
            "type": "interface",
            "sourceCode": "import { IBlog } from './blog';\r\nexport interface BlogState {\r\n  blog: IBlog[] | null;\r\n  // error message\r\n  Message: string | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "blog",
                    "type": "IBlog[] | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "Message",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IBlog",
            "id": "interface-IBlog-bcd72ed3646c821d01271260fdc5d52e",
            "file": "src/app/models/blog.ts",
            "type": "interface",
            "sourceCode": "export interface IBlog{\r\n    title?: string;\r\n    imageUrl?: string;\r\n    description?: string;\r\n    category?: string;\r\n    date?: Date | null;\r\n    id?: number | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "date",
                    "type": "Date | null",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-044fa64eda02a83fdc5532b66109f957",
            "file": "src/app/models/user.ts",
            "type": "interface",
            "sourceCode": "export interface IUser{\r\n    userName?: string;\r\n    email?: any;\r\n    phoneNo?: number;\r\n    password?: number;\r\n    accessToken?: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "phoneNo",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-ed4b5dcb1b5f718108c17a88f0292c22",
            "file": "src/app/models/state.ts",
            "type": "interface",
            "sourceCode": "import { IUser } from '../models/user';\r\nexport interface State {\r\n  // is a user authenticated?\r\n  isAuthenticated: boolean;\r\n  // if authenticated, there should be a user object\r\n  user: IUser | null;\r\n  // error message\r\n  errorMessage: string | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "user",
                    "type": "IUser | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Theme",
            "id": "interface-Theme-7ace2b500707729d2995f4cef124829b",
            "file": "src/app/theme.ts",
            "type": "interface",
            "sourceCode": "export interface Theme {\r\n  name: string;\r\n  properties: any;\r\n}\r\n\r\nexport const light: Theme = {\r\n  name: 'light',\r\n  properties: {\r\n    '--background-default': '#F4FAFF',\r\n    '--primary-default': '#000000',\r\n    '--popup-default': '#000000',\r\n  }\r\n};\r\n\r\nexport const dark: Theme = {\r\n  name: 'dark',\r\n  properties: {\r\n    '--background-default': '#797C80',\r\n    '--primary-default': '#ffffff',\r\n    '--popup-default': '#000000',\r\n  }\r\n};\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "properties",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-2a8ffafeba72506dc62834ad8e22d0b4",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN),\r\n        map((action: LogIn) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.logIn(payload.email, payload.password).pipe(\r\n                map((user) => {\r\n                    console.log(user);\r\n                    return new LogInSuccess({ token: user.accessToken, email: payload.email });\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return of(new LogInFailure({ error }));\r\n                })\r\n            );\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE)\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.token);\r\n           // this.router.navigateByUrl('/');\r\n            window.location.href = '/';\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap(() => {\r\n            localStorage.removeItem('token');\r\n            location.href = '/';\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.signUp(payload).pipe(\r\n                map((user) => {\r\n                    return new SignUpSuccess({ token: user.accessToken, email: payload.email });\r\n                }),\r\n            catchError((error) => {\r\n                    return of(new SignUpFailure({ error }));\r\n                })\r\n            );\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_FAILURE)\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.token);\r\n            this.router.navigateByUrl('/');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, map, switchMap, catchError } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../../services/auth.service';\r\nimport {\r\n    AuthActionTypes,\r\n    LogIn, LogInSuccess, LogInFailure, SignUp, SignUpSuccess, SignUpFailure,\r\n    LogOut\r\n\r\n} from '../actions/auth.actions';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n\r\n    constructor(\r\n        private actions: Actions,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n    ) { }\r\n    @Effect()\r\n    LogIn: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN),\r\n        map((action: LogIn) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.logIn(payload.email, payload.password).pipe(\r\n                map((user) => {\r\n                    console.log(user);\r\n                    return new LogInSuccess({ token: user.accessToken, email: payload.email });\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return of(new LogInFailure({ error }));\r\n                })\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    LogInSuccess: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.token);\r\n           // this.router.navigateByUrl('/');\r\n            window.location.href = '/';\r\n        })\r\n    );\r\n    @Effect({ dispatch: false })\r\n    LogInFailure: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE)\r\n    );\r\n\r\n    @Effect()\r\n    SignUp: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.signUp(payload).pipe(\r\n                map((user) => {\r\n                    return new SignUpSuccess({ token: user.accessToken, email: payload.email });\r\n                }),\r\n            catchError((error) => {\r\n                    return of(new SignUpFailure({ error }));\r\n                })\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    SignUpSuccess: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n            localStorage.setItem('token', user.payload.token);\r\n            this.router.navigateByUrl('/');\r\n        })\r\n    );\r\n    @Effect({ dispatch: false })\r\n    SignUpFailure: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_FAILURE)\r\n    );\r\n    @Effect({ dispatch: false })\r\n    public LogOut: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap(() => {\r\n            localStorage.removeItem('token');\r\n            location.href = '/';\r\n        })\r\n    );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3492cf4cdcd6114203223fd3c4349a15",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "environment.BASE_URL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "payload",
                            "type": "IUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "IUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport {environment} from '../../environments/environment';\nimport { IUser } from '../models/user';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n  private BASE_URL = environment.BASE_URL;\n\n  constructor(private http: HttpClient) {}\n\n  getToken(): string {\n    return localStorage.getItem('token');\n  }\n\n  logIn(email: string, password: string): Observable<IUser> {\n    const url = `${this.BASE_URL}login`;\n    return this.http.post<IUser>(url, {email, password});\n  }\n\n  signUp(payload: IUser): Observable<IUser> {\n    const url = `${this.BASE_URL}register`;\n    return this.http.post<IUser>(url, {...payload});\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BlogEffects",
            "id": "injectable-BlogEffects-ff58a64007e13342819188f160f85b6d",
            "file": "src/app/store/effects/blog.effects.ts",
            "properties": [
                {
                    "name": "deleteBlog",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(blogActionType.DELETE),\r\n        switchMap((payload) => {\r\n            return this.blogService.deleteBlog(payload).pipe(\r\n                map((blog) => {\r\n                    console.log(blog);\r\n                    return new DeleteSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error; // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "edit",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(blogActionType.Edit),\r\n        switchMap((payload) => {\r\n            return this.blogService.editList(payload).pipe(\r\n                map((blog: IBlog[]) => {\r\n                    console.log(blog);\r\n                    return new EditSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error; // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "insert",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(blogActionType.INSERT),\r\n        switchMap((payload) => {\r\n            return this.blogService.addList(payload).pipe(\r\n                map((blog: IBlog[]) => {\r\n                    console.log(blog);\r\n                    return new InsertSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error;  // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "Load",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(blogActionType.LOAD),\r\n        switchMap(() => {\r\n            return this.blogService.blogList().pipe(\r\n                map((blog: IBlog[]) => {\r\n                    return new LoadSuccess({ blog });\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error;  // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LoadSingle",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(blogActionType.LOAD_SINGLE),\r\n        switchMap((id) => {\r\n            return this.blogService.blog(id).pipe(\r\n                map((blog) => {\r\n                    return new LoadSingleSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error;  // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, map, switchMap, catchError } from 'rxjs/operators';\r\nimport {\r\n    blogActionType, Load, Insert, LoadSuccess, InsertSuccess, LoadSingleSuccess, EditSuccess, DeleteSuccess\r\n} from '../actions/blog.action';\r\nimport { IBlog } from 'src/app/models/blog';\r\nimport { BlogService } from 'src/app/services/blog-service.service';\r\n\r\n@Injectable()\r\nexport class BlogEffects {\r\n    constructor(\r\n        private actions: Actions,\r\n        private router: Router,\r\n        private blogService: BlogService\r\n    ) { }\r\n\r\n    @Effect()\r\n    Load: Observable<any> = this.actions.pipe(\r\n        ofType(blogActionType.LOAD),\r\n        switchMap(() => {\r\n            return this.blogService.blogList().pipe(\r\n                map((blog: IBlog[]) => {\r\n                    return new LoadSuccess({ blog });\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error;  // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    );\r\n    @Effect()\r\n    LoadSingle: Observable<any> = this.actions.pipe(\r\n        ofType(blogActionType.LOAD_SINGLE),\r\n        switchMap((id) => {\r\n            return this.blogService.blog(id).pipe(\r\n                map((blog) => {\r\n                    return new LoadSingleSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error;  // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    insert: Observable<any> = this.actions.pipe(\r\n        ofType(blogActionType.INSERT),\r\n        switchMap((payload) => {\r\n            return this.blogService.addList(payload).pipe(\r\n                map((blog: IBlog[]) => {\r\n                    console.log(blog);\r\n                    return new InsertSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error;  // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    );\r\n    @Effect()\r\n    edit: Observable<any> = this.actions.pipe(\r\n        ofType(blogActionType.Edit),\r\n        switchMap((payload) => {\r\n            return this.blogService.editList(payload).pipe(\r\n                map((blog: IBlog[]) => {\r\n                    console.log(blog);\r\n                    return new EditSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error; // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    );\r\n    @Effect()\r\n    deleteBlog: Observable<any> = this.actions.pipe(\r\n        ofType(blogActionType.DELETE),\r\n        switchMap((payload) => {\r\n            return this.blogService.deleteBlog(payload).pipe(\r\n                map((blog) => {\r\n                    console.log(blog);\r\n                    return new DeleteSuccess(blog);\r\n                }),\r\n                catchError((error) => {\r\n                    console.log(error);\r\n                    return error; // of(new SignUpFailure({ error: error }));\r\n                })\r\n            );\r\n        })\r\n    );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "blogService",
                        "type": "BlogService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "blogService",
                        "type": "BlogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BlogService",
            "id": "injectable-BlogService-be3871f678ad4b593e026258e6d03046",
            "file": "src/app/services/blog-service.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "environment.BASE_URL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addList",
                    "args": [
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBlog[]>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "blog",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBlog>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "blogList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IBlog[]>",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "deleteBlog",
                    "args": [
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editList",
                    "args": [
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBlog[]>",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IBlog } from '../models/blog';\nimport { Observable } from 'rxjs';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogService {\n  private BASE_URL = environment.BASE_URL;\n  constructor(private http: HttpClient) {}\n  blogList(): Observable<IBlog[]> {\n    const url = `${this.BASE_URL}blogList`;\n    return this.http.get<IBlog[]>(url);\n  }\n  blog(id): Observable<IBlog> {\n    const url = `${this.BASE_URL}blogList/${id.payload}`;\n    return this.http.get<IBlog>(url);\n  }\n  addList(payload): Observable<IBlog[]> {\n    const url = `${this.BASE_URL}blogList`;\n    return this.http.post<IBlog[]>(url, payload.payload);\n  }\n  editList(payload): Observable<IBlog[]> {\n    const url = `${this.BASE_URL}blogList/${payload.payload.id}`;\n    return this.http.patch<IBlog[]>(url, payload.payload);\n  }\n  deleteBlog(payload): Observable<any> {\n    const url = `${this.BASE_URL}blogList/${payload.payload}`;\n    return this.http.delete<any>(url, payload.payload);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-1eb502c76ff49ed242e651b22f35dcc1",
            "file": "src/app/services/theme.service.ts",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "light",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableThemes",
                    "defaultValue": "[light, dark]",
                    "type": "Theme[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "getAvailableThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "setActiveTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "setLightTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Theme, light, dark } from '../theme';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n\n  constructor() { }\n  private active: Theme = light;\n  private availableThemes: Theme[] = [light, dark];\n\n  getAvailableThemes(): Theme[] {\n    return this.availableThemes;\n  }\n\n  getActiveTheme(): Theme {\n    return this.active;\n  }\n\n  isDarkTheme(): boolean {\n    return this.active.name === dark.name;\n  }\n\n  setDarkTheme(): void {\n    this.setActiveTheme(dark);\n  }\n\n  setLightTheme(): void {\n    this.setActiveTheme(light);\n  }\n\n  setActiveTheme(theme: Theme): void {\n    this.active = theme;\n\n    Object.keys(this.active.properties).forEach(property => {\n      document.documentElement.style.setProperty(\n        property,\n        this.active.properties[property]\n      );\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteBlog",
            "id": "class-DeleteBlog-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.DELETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteSuccess",
            "id": "class-DeleteSuccess-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.DELETE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Edit",
            "id": "class-Edit-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.Edit",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EditSuccess",
            "id": "class-EditSuccess-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.EDIT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Insert",
            "id": "class-Insert-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.INSERT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "InsertSuccess",
            "id": "class-InsertSuccess-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.INSERT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Load",
            "id": "class-Load-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "blogActionType.LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadSingle",
            "id": "class-LoadSingle-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.LOAD_SINGLE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadSingleSuccess",
            "id": "class-LoadSingleSuccess-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.LOAD_SINGLE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadSuccess",
            "id": "class-LoadSuccess-a2b38f8e16d9e1f62ed57d6add8e8655",
            "file": "src/app/store/actions/blog.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum blogActionType {\r\n    INSERT = '[blog] insert',\r\n    Edit = '[blog] Edit',\r\n    EDIT_SUCCESS = '[blog] Edit Success',\r\n    LOAD = '[blog] load',\r\n    LOAD_SUCCESS = '[blog] Load Success',\r\n    INSERT_SUCCESS = '[blog] Insert Success',\r\n    LOAD_SINGLE = '[blog] Load Single',\r\n    LOAD_SINGLE_SUCCESS = '[blog] Load Single Success',\r\n    DELETE = '[blog] Delete',\r\n    DELETE_SUCCESS = '[blog] Delete Success',\r\n}\r\n\r\nexport class Insert implements Action {\r\n    readonly type = blogActionType.INSERT;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Edit implements Action {\r\n    readonly type = blogActionType.Edit;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class Load implements Action {\r\n    readonly type = blogActionType.LOAD;\r\n    constructor() { }\r\n}\r\n\r\nexport class LoadSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class InsertSuccess implements Action {\r\n    readonly type = blogActionType.INSERT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class EditSuccess implements Action {\r\n    readonly type = blogActionType.EDIT_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class LoadSingle implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadSingleSuccess implements Action {\r\n    readonly type = blogActionType.LOAD_SINGLE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\nexport class DeleteBlog implements Action {\r\n    readonly type = blogActionType.DELETE;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteSuccess implements Action {\r\n    readonly type = blogActionType.DELETE_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport type All =\r\n    | Insert\r\n    | Edit\r\n    | Load\r\n    | LoadSuccess\r\n    | InsertSuccess\r\n    | EditSuccess\r\n    | LoadSingle\r\n    | LoadSingleSuccess\r\n    | DeleteBlog\r\n    | DeleteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "blogActionType.LOAD_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-b69cdd53c4813e044a7b93dcb532453e",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n  constructor() { }\r\n}\r\nexport type All =\r\n| LogIn\r\n| LogInSuccess\r\n| LogInFailure\r\n| SignUp\r\n| SignUpSuccess\r\n| SignUpFailure\r\n| LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoginElement",
            "id": "class-LoginElement-a4b0c6acff7c1a96cfb7c6142bc2dedb",
            "file": "src/app/login-element/login-element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, customElement } from 'lit-element';\r\n\r\n\r\n@customElement('login-element')\r\nexport class LoginElement extends LitElement {\r\n    userDetails: any = {};\r\n    password = '';\r\n    email = '';\r\n    constructor() {\r\n        super();\r\n    }\r\n    onPassword({ target: { value } }) { this.password = value; }\r\n    onEmail({ target: { value } }) { this.email = value; }\r\n\r\n    render() {\r\n        return html`<div>\r\n    <form>\r\n        <div>\r\n            <div>\r\n                <label> User Name</label>\r\n                <input type='email' name=\"email\" .value=\"${this.email}\"\r\n                @change=\"${this.onEmail}\" >\r\n            </div>\r\n            <div>\r\n                <label> Password</label>\r\n                <input type='password' name=\"password\" .value=\"${this.password}\"\r\n                @change=\"${this.onPassword}\" >\r\n            </div>\r\n            <div id=\"message\">\r\n            </div>\r\n            <div>\r\n            <button type='button' @click=\"${this.submitForm}\" >Login</button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n    </div>`;\r\n    }\r\n    submitForm() {\r\n        const message = this.shadowRoot.getElementById('message') as HTMLElement;\r\n        message.innerHTML = '';\r\n        if (!this.email) {\r\n            message.innerHTML = 'user name require';\r\n            return;\r\n        }\r\n        if (!this.password) {\r\n            message.innerHTML = 'password require';\r\n            return;\r\n        }\r\n        const payload = {\r\n            email: this.email,\r\n            password: this.password\r\n        };\r\n        //   redirectTo:'http://localhost:3000'\r\n        // fetch(this.conf.url, {\r\n        //     'method':'POST',\r\n        //     body: JSON.stringify(payload)\r\n        // }).then((data)=>{\r\n\r\n        //     message.innerHTML = 'logged in successfully'\r\n        //    // location.href = this.conf.redirectTo\r\n        // },(data)=>{\r\n        //     message.innerHTML = data\r\n        // }\r\n        // )\r\n\r\n        const myEvent = new CustomEvent('my-event', {\r\n            detail: payload,\r\n            bubbles: true,\r\n            composed: true\r\n        });\r\n        this.dispatchEvent(myEvent);\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "properties": [
                {
                    "name": "email",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "userDetails",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "onEmail",
                    "args": [
                        {
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPassword",
                    "args": [
                        {
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement"
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-b69cdd53c4813e044a7b93dcb532453e",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n  constructor() { }\r\n}\r\nexport type All =\r\n| LogIn\r\n| LogInSuccess\r\n| LogInFailure\r\n| SignUp\r\n| SignUpSuccess\r\n| SignUpFailure\r\n| LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-b69cdd53c4813e044a7b93dcb532453e",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n  constructor() { }\r\n}\r\nexport type All =\r\n| LogIn\r\n| LogInSuccess\r\n| LogInFailure\r\n| SignUp\r\n| SignUpSuccess\r\n| SignUpFailure\r\n| LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-b69cdd53c4813e044a7b93dcb532453e",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n  constructor() { }\r\n}\r\nexport type All =\r\n| LogIn\r\n| LogInSuccess\r\n| LogInFailure\r\n| SignUp\r\n| SignUpSuccess\r\n| SignUpFailure\r\n| LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 39
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-b69cdd53c4813e044a7b93dcb532453e",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n  constructor() { }\r\n}\r\nexport type All =\r\n| LogIn\r\n| LogInSuccess\r\n| LogInFailure\r\n| SignUp\r\n| SignUpSuccess\r\n| SignUpFailure\r\n| LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-b69cdd53c4813e044a7b93dcb532453e",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n  constructor() { }\r\n}\r\nexport type All =\r\n| LogIn\r\n| LogInSuccess\r\n| LogInFailure\r\n| SignUp\r\n| SignUpSuccess\r\n| SignUpFailure\r\n| LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-b69cdd53c4813e044a7b93dcb532453e",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n  constructor() { }\r\n}\r\nexport type All =\r\n| LogIn\r\n| LogInSuccess\r\n| LogInFailure\r\n| SignUp\r\n| SignUpSuccess\r\n| SignUpFailure\r\n| LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddEditBlogListComponent",
            "id": "component-AddEditBlogListComponent-54f0eda706b1221c3dee7cb2a5756640",
            "file": "src/app/add-edit-blog-list/add-edit-blog-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-edit-blog-list",
            "styleUrls": [
                "./add-edit-blog-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-edit-blog-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addeditblogForm",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "blogObj",
                    "type": "IBlog",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "blogsObservable",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "categoryList",
                    "defaultValue": "[\n    'Music',\n    'Fashion',\n    'Car',\n    'Real State',\n    'Beauty',\n    'Travel',\n    'others'\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "editId",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "message",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getEditBlog",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IBlog } from '../models/blog';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../models/store/app.state';\nimport { Insert, LoadSingle, Edit } from '../store/actions/blog.action';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-add-edit-blog-list',\n  templateUrl: './add-edit-blog-list.component.html',\n  styleUrls: ['./add-edit-blog-list.component.scss']\n})\nexport class AddEditBlogListComponent implements OnInit {\n  addeditblogForm;\n  blogObj: IBlog;\n  blogsObservable: Observable<any>;\n  message: any;\n  editId: any;\n  constructor(private fb: FormBuilder, private route: ActivatedRoute, private router: Router, private store: Store<AppState>) {\n    this.editId = this.route.snapshot.paramMap.get('id');\n    this.blogsObservable = this.store.select(state => state.blog);\n  }\n  categoryList = [\n    'Music',\n    'Fashion',\n    'Car',\n    'Real State',\n    'Beauty',\n    'Travel',\n    'others'\n  ];\n  ngOnInit(): void {\n    this.addeditblogForm = this.fb.group({\n      title: [''],\n      imageUrl: [''],\n      description: [''],\n      category: ['']\n    });\n    if (this.editId) {\n      this.blogsObservable.subscribe((data) => {\n        if (data && data.Message === 'single blog loaded') {\n          const dataObj = data.blog;\n          this.addeditblogForm.patchValue({\n            title: dataObj.title,\n            imageUrl: dataObj.imageUrl,\n            description: dataObj.description,\n            category: dataObj.category\n          });\n        }\n      });\n      this.getEditBlog(this.editId);\n    }\n  }\n  getEditBlog(id) {\n    this.store.dispatch(new LoadSingle(id));\n  }\n  onSubmit() {\n    const title = this.addeditblogForm.controls.title.value;\n    const imageUrl = this.addeditblogForm.controls.imageUrl.value;\n    const description = this.addeditblogForm.controls.description.value;\n    const category = this.addeditblogForm.controls.category.value;\n    const date = new Date();\n    this.blogObj = {\n      title,\n      imageUrl,\n      description,\n      category,\n      date\n    };\n    if (this.editId) {\n      this.blogObj.id = this.editId;\n      this.store.dispatch(new Edit(this.blogObj));\n    } else {\n      this.store.dispatch(new Insert(this.blogObj));\n    }\n\n    this.blogsObservable.subscribe((data) => {\n      this.message = data.Message;\n      if (this.message === 'blog Edited successfully') {\n        setTimeout(() => {\n          this.router.navigateByUrl('/');\n        }, 1000);\n      }\n      if (this.message === 'blog added successfully') {\n        setTimeout(() => {\n          this.message = null;\n        }, 1000);\n      }\n      this.addeditblogForm.reset();\n    });\n  }\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-edit-blog-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>{{message}}</div>\n<form [formGroup]=\"addeditblogForm\">\n        <div>\n            <label>Title</label>\n            <input type=\"text\" name=\"title\"  formControlName=\"title\">\n        </div>\n        <div>\n            <label>Image Url</label>\n            <input type=\"url\" name=\"imageUrl\" formControlName=\"imageUrl\">\n        </div>\n        <div>\n            <label>Description</label>\n            <textarea name=\"description\" formControlName=\"description\"></textarea>\n        </div>\n        <div>\n            <label>Category</label>\n            <select  name=\"password\" formControlName=\"category\">\n                <option *ngFor='let category of categoryList'>{{category}}</option>\n            </select>\n        </div>\n        <input type=\"button\" value=\"submit\" (click)=\"onSubmit()\" />\n    </form>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fa92b49e21534929b777b52783e28bf2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'blogs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'blogs';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "BlogListComponent",
            "id": "component-BlogListComponent-80445171bac329c61dc6d2778f83e7dc",
            "file": "src/app/blog-list/blog-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blog-list",
            "styleUrls": [
                "./blog-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./blog-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bloglist",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "blogsObservable",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isloggedin",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "DeleteBlog",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editBlock",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IBlog } from '../models/blog';\nimport { Store, select } from '@ngrx/store';\nimport { AppState } from '../models/store/app.state';\nimport { Load, DeleteBlog } from '../store/actions/blog.action';\nimport { Observable } from 'rxjs';\nimport { BlogState } from '../models/blog-state';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-blog-list',\n  templateUrl: './blog-list.component.html',\n  styleUrls: ['./blog-list.component.scss']\n})\nexport class BlogListComponent implements OnInit {\n  blogsObservable: Observable<any>;\n  bloglist: any;\n  isloggedin = false;\n  constructor(private store: Store<any>, private router: Router, private authService: AuthService, ) {\n    this.blogsObservable = this.store.select(state => state.blog);\n  }\n\n  ngOnInit(): void {\n    if (this.authService.getToken()) {\n      this.isloggedin = true;\n    }\n    this.blogsObservable.subscribe((data) => {\n      if (data) {\n        this.bloglist = data.blog;\n      }\n      if (data.Message === 'Succesfully deleted the blog') {\n        alert(data.Message);\n        this.store.dispatch(new Load());\n      }\n    });\n    this.store.dispatch(new Load());\n  }\n  editBlock(id) {\n    this.router.navigate(['addEdit', { id }]);\n  }\n  DeleteBlog(id) {\n    if (confirm('Are you sure you want to delete this blog?')) {\n      this.store.dispatch(new DeleteBlog(id));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".blog-container{\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    > li{\r\n        border-bottom: 1px solid;\r\n        margin: 10px 0;\r\n        padding: 5px;\r\n        > article {\r\n            > header{\r\n            h2{\r\n                font-size: 25px;\r\n                line-height: 40px;\r\n                }  \r\n            }\r\n            > section{\r\n                ul {\r\n                    li{\r\n                        display: flex;\r\n                        figure{\r\n                            width: 30%;\r\n                            img{\r\n                                max-width: 100%;\r\n                            }\r\n                        }\r\n                        section{\r\n                            width: 70%;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./blog-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<main>\n    <ul *ngIf=\"bloglist\" class=\"blog-container\">\n        <li *ngFor=\"let blog of bloglist trackBy bloglist.id\">\n            <article>\n                <header>\n                    <h2>\n                        {{blog.title}}\n                    </h2>\n                    <div>\n                        {{blog.date | date}} \n                    </div>\n                </header>\n                <section>\n                    <ul>\n                        <li>\n                            <figure>\n                                <img [src]=\"blog.imageUrl\" [title]=\"blog.title\">\n                            </figure>\n                            <section>\n                            <p>\n                                    {{blog.description }}\n                            </p>\n                            <p>\n                                category: {{blog.category}}\n                            </p>\n                            </section>\n                           \n                        </li>\n                        <li *ngIf=\"isloggedin\">\n                            <button type=\"button\" (click)=\"editBlock(blog.id)\">Edit Blog</button>\n                            <button type=\"button\" (click)=\"DeleteBlog(blog.id)\">Delete Blog</button>\n                        </li>\n                    </ul>\n                </section>\n            </article>\n        </li>\n    </ul>\n</main>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-18218c72768da13a35abd7a1492672f6-1",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isloggedin",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "theme",
                    "defaultValue": "'ligth'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "themeService",
                    "type": "ThemeService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../models/store/app.state';\nimport { LogOut } from '../store/actions/auth.actions';\nimport { ThemeService } from '../services/theme.service';\nimport { AuthService } from '../services/auth.service';\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  theme = 'ligth';\n  constructor( private store: Store<AppState>, private authService: AuthService, public themeService: ThemeService ) { }\n  isloggedin = false;\n  ngOnInit(): void{\n    if (this.authService.getToken()){\n      this.isloggedin = true;\n    }\n  }\n  logOut(): void {\n    this.store.dispatch(new LogOut());\n  }\n  changeTheme(){\n    if (this.theme === 'ligth'){\n      this.themeService.setLightTheme();\n    } else{\n      this.themeService.setDarkTheme();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "header{\r\n    display: flex;\r\n    margin: 0 0 10px;\r\n    padding: 9px 15px;\r\n    border-bottom: 1px solid;\r\n    h1{\r\n        margin: 0;\r\n        font-size: 27px;\r\n        line-height: 36px;\r\n    }\r\n    nav{\r\n        width: 85%;\r\n        ul{\r\n            display: inline-flex;\r\n            justify-content: center;\r\n            width: 100%;\r\n            padding: 0;\r\n            margin: 0;\r\n            \r\n            li{\r\n                padding: 10px;\r\n                list-style: none;\r\n                a{\r\n                    text-decoration: none;\r\n                    color:black\r\n                }\r\n            }\r\n        }\r\n    }\r\n    .themes{width: 20%; font-size:16px;margin:10px;}\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header>\n    <h1>\n        Blogs\n    </h1>\n    <nav>\n        <ul >\n            <li><a tabindex=\"1\" routerLink=\"/\" routerLinkActive=\"active\">list</a>\n            </li>\n            <li  tabindex=\"1\"  *ngIf=\"isloggedin\"><a routerLink=\"/addEdit\" routerLinkActive=\"active\">add Blog</a>\n            </li>\n            <li  tabindex=\"1\"  *ngIf=\"!isloggedin\"><a routerLink=\"/log-in\" routerLinkActive=\"active\">log in</a>\n            </li>\n            <li  tabindex=\"1\"  *ngIf=\"isloggedin\"><a (click)='logOut()'>log out</a>\n            </li>\n            <li  tabindex=\"1\"  *ngIf=\"!isloggedin\"> <a routerLink=\"/sign-up\" routerLinkActive=\"active\">registration</a>\n            </li>\n        </ul>\n    </nav>\n    <div class=\"themes\">\n        <label class=\"radio-inline\">\n        <input type=\"radio\" value=\"ligth\" name=\"theme\"   [(ngModel)]=\"theme\" (change)=\"changeTheme()\"> ligth theme\n        </label>\n        <label class=\"radio-inline\">\n        <input type=\"radio\" value=\"dark\" name=\"theme\"  [(ngModel)]=\"theme\"  (change)=\"changeTheme()\"> dark theme\n        </label>\n    </div>\n</header>\n\n\n\n"
        },
        {
            "name": "LogInComponent",
            "id": "component-LogInComponent-2c98a316599b2582c04f1447d164286e",
            "file": "src/app/log-in/log-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-in",
            "styleUrls": [
                "./log-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./log-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "myElement",
                    "defaultValue": "document.querySelector('login-element')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { IUser } from '../models/user';\nimport { AppState } from '../models/store/app.state';\nimport { LogIn } from '../store/actions/auth.actions';\n\n@Component({\n  selector: 'app-log-in',\n  templateUrl: './log-in.component.html',\n  styleUrls: ['./log-in.component.scss']\n})\nexport class LogInComponent implements OnInit {\n  myElement = document.querySelector('login-element');\n  constructor(private store: Store<AppState>){}\n  login(data){\n    this.store.dispatch(new LogIn(data.detail));\n  }\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./log-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<login-element  (my-event)=\"login($event)\" ></login-element>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegistrationComponent",
            "id": "component-RegistrationComponent-93026efe8644f3eaac92354dea7002ca",
            "file": "src/app/registration/registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration",
            "styleUrls": [
                "./registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registrationForm",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "registrationObj",
                    "type": "IUser",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IUser } from '../models/user';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../models/store/app.state';\nimport { SignUp } from '../store/actions/auth.actions';\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n  registrationForm;\n  registrationObj: IUser;\n  constructor(private fb: FormBuilder, private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.registrationForm = this.fb.group({\n      userName: ['', Validators.required],\n      email: ['', Validators.required],\n      phoneNo: [''],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    const name = this.registrationForm.controls.userName.value;\n    const email = this.registrationForm.controls.emai.value;\n    const phoneNo = this.registrationForm.controls.phoneNo.value;\n    const password = this.registrationForm.controls.password.value;\n    const payload = {\n      name,\n      email,\n      phoneNo,\n      password\n    };\n    this.store.dispatch(new SignUp(payload));\n    this.registrationForm.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"registrationForm\">\n    <div>\n        <label>User Name</label>\n        <input type=\"text\" name=\"name\" aria-placeholder=\"User Name\" placeholder=\"User Name\" formControlName=\"userName\">\n    </div>\n    <div>\n        <label>Email ID</label>\n        <input type=\"text\" name=\"email\" formControlName=\"email\"  aria-placeholder=\"email\" placeholder=\"email\" >\n    </div>\n    <div>\n        <label>Phone No</label>\n        <input type=\"text\" name=\"phoneNo\" formControlName=\"phoneNo\" aria-placeholder=\"phoneNo\" placeholder=\"phoneNo\" >\n    </div>\n    <div>\n        <label>Password</label>\n        <input type=\"text\" name=\"password\" formControlName=\"password\"  aria-placeholder=\"password\" placeholder=\"password\" >\n    </div>\n    <input type=\"button\" value=\"submit\" (click)=\"onSubmit()\" aria-label=\"submit Button\"/>\n</form>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddEditBlogListComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BlogListComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LogInComponent"
                        },
                        {
                            "name": "RegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n  name: 'dark',\r\n  properties: {\r\n    '--background-default': '#797C80',\r\n    '--primary-default': '#ffffff',\r\n    '--popup-default': '#000000',\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  BASE_URL : 'http://localhost:3000/'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  BASE_URL : 'http://localhost:3000/'\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/blog.reducer.ts",
                "type": "BlogState",
                "defaultValue": "{\r\n  blog: [],\r\n  Message: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n  name: 'light',\r\n  properties: {\r\n    '--background-default': '#F4FAFF',\r\n    '--primary-default': '#000000',\r\n    '--popup-default': '#000000',\r\n  }\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/store/app.state.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth1.reducer,\r\n    blog: blog.blogReducer\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "blogReducer",
                "file": "src/app/store/reducers/blog.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "blogState",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "BlogState",
                "jsdoctags": [
                    {
                        "name": "blogState",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                "file": "src/app/store/actions/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Insert | Edit | Load | LoadSuccess | InsertSuccess | EditSuccess | LoadSingle | LoadSingleSuccess | DeleteBlog | DeleteSuccess",
                "file": "src/app/store/actions/blog.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Signup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Signup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Signup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.actions.ts"
            },
            {
                "name": "blogActionType",
                "childs": [
                    {
                        "name": "INSERT",
                        "value": "[blog] insert"
                    },
                    {
                        "name": "Edit",
                        "value": "[blog] Edit"
                    },
                    {
                        "name": "EDIT_SUCCESS",
                        "value": "[blog] Edit Success"
                    },
                    {
                        "name": "LOAD",
                        "value": "[blog] load"
                    },
                    {
                        "name": "LOAD_SUCCESS",
                        "value": "[blog] Load Success"
                    },
                    {
                        "name": "INSERT_SUCCESS",
                        "value": "[blog] Insert Success"
                    },
                    {
                        "name": "LOAD_SINGLE",
                        "value": "[blog] Load Single"
                    },
                    {
                        "name": "LOAD_SINGLE_SUCCESS",
                        "value": "[blog] Load Single Success"
                    },
                    {
                        "name": "DELETE",
                        "value": "[blog] Delete"
                    },
                    {
                        "name": "DELETE_SUCCESS",
                        "value": "[blog] Delete Success"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/blog.action.ts"
            }
        ],
        "groupedVariables": {
            "src/app/theme.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n  name: 'dark',\r\n  properties: {\r\n    '--background-default': '#797C80',\r\n    '--primary-default': '#ffffff',\r\n    '--popup-default': '#000000',\r\n  }\r\n}"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n  name: 'light',\r\n  properties: {\r\n    '--background-default': '#F4FAFF',\r\n    '--primary-default': '#000000',\r\n    '--popup-default': '#000000',\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  BASE_URL : 'http://localhost:3000/'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  BASE_URL : 'http://localhost:3000/'\n}"
                }
            ],
            "src/app/store/reducers/blog.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/blog.reducer.ts",
                    "type": "BlogState",
                    "defaultValue": "{\r\n  blog: [],\r\n  Message: null\r\n}"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/models/store/app.state.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/store/app.state.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth1.reducer,\r\n    blog: blog.blogReducer\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/blog.reducer.ts": [
                {
                    "name": "blogReducer",
                    "file": "src/app/store/reducers/blog.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "blogState",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "BlogState",
                    "jsdoctags": [
                        {
                            "name": "blogState",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Signup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Signup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Signup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.actions.ts"
                }
            ],
            "src/app/store/actions/blog.action.ts": [
                {
                    "name": "blogActionType",
                    "childs": [
                        {
                            "name": "INSERT",
                            "value": "[blog] insert"
                        },
                        {
                            "name": "Edit",
                            "value": "[blog] Edit"
                        },
                        {
                            "name": "EDIT_SUCCESS",
                            "value": "[blog] Edit Success"
                        },
                        {
                            "name": "LOAD",
                            "value": "[blog] load"
                        },
                        {
                            "name": "LOAD_SUCCESS",
                            "value": "[blog] Load Success"
                        },
                        {
                            "name": "INSERT_SUCCESS",
                            "value": "[blog] Insert Success"
                        },
                        {
                            "name": "LOAD_SINGLE",
                            "value": "[blog] Load Single"
                        },
                        {
                            "name": "LOAD_SINGLE_SUCCESS",
                            "value": "[blog] Load Single Success"
                        },
                        {
                            "name": "DELETE",
                            "value": "[blog] Delete"
                        },
                        {
                            "name": "DELETE_SUCCESS",
                            "value": "[blog] Delete Success"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/blog.action.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/actions/blog.action.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Insert | Edit | Load | LoadSuccess | InsertSuccess | EditSuccess | LoadSingle | LoadSingleSuccess | DeleteBlog | DeleteSuccess",
                    "file": "src/app/store/actions/blog.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "log-in",
                        "component": "LogInComponent"
                    },
                    {
                        "path": "sign-up",
                        "component": "RegistrationComponent"
                    },
                    {
                        "path": "addEdit",
                        "component": "AddEditBlogListComponent",
                        "canActivate": [
                            "CanActivateAddEdit"
                        ]
                    },
                    {
                        "path": "",
                        "component": "BlogListComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/add-edit-blog-list/add-edit-blog-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEditBlogListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/blog-list/blog-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlogListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/canActivateAddEdit.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanActivateAddEdit",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/log-in/log-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/login-element/login-element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginElement",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/blog-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlogState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/blog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBlog",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/registration/registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/blog-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BlogService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteBlog",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EditSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Insert",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InsertSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Load",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadSingle",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadSingleSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/blog.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/blog.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BlogEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/blog.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "blogReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/blog.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}